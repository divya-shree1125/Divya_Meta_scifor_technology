# -*- coding: utf-8 -*-
"""week_2_TEST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PmhFTEU-GUnY1DTYReig-ahPkHYOxcxY
"""

#1.what are decorators in python?provide a code of same.
'''Decorators are a very powerful and useful tool in python since it allows programmers to modify the behaviour of function or class.
Decorators allow us to wrap another function in order to extend the behaviour of the wrapped function, without permanetly modifying it'''
class student:
  @staticmethod
  def college():
    print('ABC college')

#2.what do you understand by method overriding and method overloading?give the complete implementation.
'''method overloading: It occurs when a subclass provides a specific implementation for a method that is already defined in its superclass.'''
class animal:
  def make_sound(self):
    print('the animal make sound')
class dog(animal):
  def make_sound(self):
    print('the dog barks')
'''Method overriding: It occurs when a subclass provides a specific implementation for a method that is already defined in its superclass.'''
class addition:
  def add(self,a=None,b=None,c=None):
    if a!=None and b!=None and c!=None:
      s=a+b+c
      return s
    elif a!=None and b!=None:
      s=a+b
      return s
    else:
      return a

obj=addition()
print(obj.add())

#3.code for hybrid inheritance.
class animal:
  def __init__(self,name):
    self.name=name
  def speak(self):
    pass
class dog(animal):
  def speak(self):
    return f"{self.name}says woof!"
class petowner:
  def __init__(self,name,pet_name):
    self.name=name
    self.pet=dog(pet_name)
  def introduce(self):
    print(f"my  name is{self.name}")
    print(f"my pet{self.pet.name}")
    print(f"it says:{self.pet.speak()}")

owner=petowner('alice','buddy')
print(owner.introduce())

#4.explain about the time complexity and space complexity of stacks, queues,linekdin list.
''''time and space complexity of stacks,queues,linked list are given
1.stacks:
  a.push opertion:
    time complexity:o(1)
    space complexity:o(1)
  b.pop operation:
    time complexity:o(1)
    space complexity:o(1)
  c.peek operation:
    time complexity:o(1)
    space complexity:o(1)

2.queues:
  a.Enqueue operation:
    time complexity:O(1)
    space complexity:O(1)
  b.dequeue operation:
    time complexity:O(1)
    space complexity:O(1)
  c.peek operation:
    time complexity:O(1)
    space complexity:O(1)

3.linked list:
  a.insertion at the head:
     time complexity:O(1)
     space complexity:O(1)
  b.insertion at the tail:
     time compexity:O(n)(in the worst case,if we don't have a tail pointer)
     space compexity:O(1)
  c.insertion at a specific position:
     time compexity:O(n)(to reach the desired position)
     space compexity:O(1)
  d.deletion at the head:
    time compexity:O(1)
    space compexityO(1)
  e.deletion at the tail:
    time compexity:O(n)(in the worst caes, if we don't have a tail pointer)
    space compexity:O(1)'''

#5.explain any 3 widgets in streamlit
'''1.slider:
     allows users to select a value from a continous range
     ex:import streamlit as st
     st.slider('select a value',min_value=0,max_value=100,value=50)
   2.selectbox:
     presents a dropdown menu with mulitple options.
     ex:import streamlit as st
     option=['apple','banana','cherry']
     a=st.selectbox('select a fruit',option)
   3.button:
     triggers an action when clicked
     ex:import streamlit as st
     st.button('click me')'''

#6.explain session in streamlit.
'''1.initialization:when a user first interacts with your streamlit app,a session is created
   2.data storage:you can store data in the session using the st.session_state dicitionary
   3.data retrieval:access stored data in subsequent page loads or app runs using the same st.session_state dicitionary.

#7.how will you run any file in streamlit
'''streamlit run filename.py'''

